class Node:
    def __init__(self, data, parent):
        self.data = data
        self.parent = parent
        self.left = None
        self.right = None

    def insert(self, data):
        if data < self.data:
            if self.left is None:
                self.left = Node(data, self)
            else:
                self.left.insert(data)
        elif data >= self.data:
            if self.right is None:
                self.right = Node(data, self)
            else:
                self.right.insert(data)
        else:
            return False
        return True

    def is_leaf(self):
        return self.right is None and self.left is None

    def is_parent(self):
        return self.parent is None


class BinaryTree:
    def __init__(self):
        self.root = None
        self.size = 0

    def add(self, data):
        if self.root is None:
            self.root = Node(data, None)
            self.size += 1
        else:
            if self.root.insert(data):
                self.size += 1

    def inorder(self, node):
        if node is not None:
            self.inorder(node.left)
            print(node.data)
            self.inorder(node.right)

    def get_root(self):
        return self.root

    def plus_minus(self):
        def traverse_and_calculate(node):
            if node is None:
                return 0
            # Lakukan traversal ke kiri, kanan, lalu hitung node saat ini
            left_sum = traverse_and_calculate(node.left)
            right_sum = traverse_and_calculate(node.right)
            current_value = node.data
            if current_value % 2 == 0:  # Jika genap, tambahkan
                return left_sum + right_sum + current_value
            else:  # Jika ganjil, kurangkan
                return left_sum + right_sum - current_value

        return traverse_and_calculate(self.root)


if __name__ == '__main__':
    binaryT = BinaryTree()
    binaryT.add(5)
    binaryT.add(4)
    binaryT.add(3)
    binaryT.add(9)
    binaryT.add(8)
    binaryT.add(6)
    binaryT.add(7)
    binaryT.add(11)
    binaryT.add(10)

    print()
    print(binaryT.plus_minus())







class Node:
    def __init__(self, data, parent):
        self.data = data
        self.parent = parent
        self.left = None
        self.right = None

    def insert(self, data):
        if data < self.data:
            if self.left is None:
                self.left = Node(data, self)
            else:
                self.left.insert(data)
        elif data >= self.data:
            if self.right is None:
                self.right = Node(data, self)
            else:
                self.right.insert(data)
        else:
            return False
        return True

    def is_leaf(self):
        return self.right is None and self.left is None

    def is_parent(self):
        return self.parent is None


class BinaryTree:
    def __init__(self):
        self.root = None
        self.size = 0

    def add(self, data):
        if self.root is None:
            self.root = Node(data, None)
            self.size += 1
        else:
            if self.root.insert(data):
                self.size += 1

    def inorder(self, node):
        if node is not None:
            self.inorder(node.left)
            print(node.data)
            self.inorder(node.right)

    def get_root(self):
        return self.root

    def plus_minus(self):
        def traverse_and_calculate(node):
            try:
                if node is None:
                    return 0
                # Lakukan traversal ke kiri, kanan, lalu hitung node saat ini
                left_sum = traverse_and_calculate(node.left)
                right_sum = traverse_and_calculate(node.right)
                current_value = node.data
                if current_value % 2 == 0:  # Jika genap, tambahkan
                    return left_sum + right_sum + current_value
                else:  # Jika ganjil, kurangkan
                    return left_sum + right_sum - current_value
            except Exception as e:
                print(f"Error processing node: {e}")
                return 0

        try:
            return traverse_and_calculate(self.root)
        except Exception as e:
            print(f"Error in tree traversal: {e}")
            return 0


if __name__ == '__main__':
    binaryT = BinaryTree()
    binaryT.add(5)
    binaryT.add(4)
    binaryT.add(3)
    binaryT.add(9)
    binaryT.add(8)
    binaryT.add(6)
    binaryT.add(7)
    binaryT.add(11)
    binaryT.add(10)

    print()
    print(binaryT.plus_minus())



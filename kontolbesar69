class HashTable:
    def __init__(self):
        self.size = 10
        self.map = [None] * self.size

    def _get_hash(self, key):
        try:
            return key % self.size
        except Exception as e:
            print(f"Error saat menghitung hash: {e}")
            return None

    def _linear_probing(self, key, index):
        try:
            while self.map[index] is not None and self.map[index][0] != key:
                index = (index + 1) % self.size
            return index
        except Exception as e:
            print(f"Error saat melakukan linear probing: {e}")
            return None

    def _probing(self, key):
        try:
            index = self._get_hash(key)
            if index is None:
                raise ValueError("Index hasil hash tidak valid.")
            return self._linear_probing(key, index)
        except Exception as e:
            print(f"Error saat probing: {e}")
            return None

    def add(self, key, value):
        try:
            index = self._probing(key)
            if index is not None:
                if self.map[index] is None:
                    self.map[index] = (key, value)
                else:
                    self.map[index] = (key, value)  # Replace if key exists
            else:
                print(f"Gagal menambahkan key {key}.")
        except Exception as e:
            print(f"Error saat menambahkan data: {e}")

    def get_data(self, key):
        try:
            index = self._get_hash(key)
            if index is None:
                raise ValueError("Index hasil hash tidak valid.")
            for _ in range(self.size):
                if self.map[index] is None:
                    break
                if self.map[index][0] == key:
                    return self.map[index][1]
                index = (index + 1) % self.size
            print(f"Key {key} tidak ditemukan.")
            return None
        except Exception as e:
            print(f"Error saat mengambil data: {e}")
            return None

    def resize(self, size):
        try:
            if size <= 0:
                raise ValueError("Ukuran hash table harus lebih besar dari 0.")
            old_map = self.map
            self.size = size
            self.map = [None] * self.size
            for item in old_map:
                if item is not None:
                    self.add(item[0], item[1])
        except Exception as e:
            print(f"Error saat mengubah ukuran hash table: {e}")

    def print_all(self):
        try:
            print("==== ISI HASH TABLE ====")
            for item in self.map:
                if item is not None:
                    print(f"NIM: {item[0]} NAMA: {item[1]}")
        except Exception as e:
            print(f"Error saat mencetak data: {e}")

def main():
    ht = HashTable()
    try:
        # isi hash table
        ht.add(71210689, "Gian")
        ht.add(71210683, "Yandi")
        ht.add(71210699, "Andreas")

        print("==== HASH TABLE SEBELUM DIRESIZE ====")
        print()
        ht.print_all()
        print(f"mahasiswa dengan NIM 71210683 adalah {ht.get_data(71210683)}")
        print()
        # resize hash table
        ht.resize(3)

        print("==== HASH TABLE SETELAH DIRESIZE ====")
        print()
        ht.print_all()
        print(f"mahasiswa dengan NIM 71210683 adalah {ht.get_data(71210683)}")
    except Exception as e:
        print(f"Error pada main function: {e}")

if __name__ == "__main__":
    main()

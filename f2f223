def quick_sort(data, low, high):
    if low < high:
        pi = partition(data, low, high)
        quick_sort(data, low, pi - 1)
        quick_sort(data, pi + 1, high)

def partition(data, low, high):
    pivot = data[high][1]
    i = low - 1
    for j in range(low, high):
        if data[j][1] >= pivot:
            i += 1
            data[i], data[j] = data[j], data[i]
    data[i + 1], data[high] = data[high], data[i + 1]
    return i + 1

class PriorityQueueSorted:
    def __init__(self):
        self.data = []

    def is_empty(self):
        return len(self.data) == 0

    def __len__(self):
        return len(self.data)

    def peek(self):
        try:
            if not self.is_empty():
                print(f"Peek: {self.data[0]}")
                return self.data[0]
            else:
                raise IndexError("Queue is empty. Cannot peek.")
        except IndexError as e:
            print(f"Error: {e}")

    def add(self, name, priority):
        self.data.append((name, priority))
        quick_sort(self.data, 0, len(self.data) - 1)

    def remove(self):
        try:
            if not self.is_empty():
                removed = self.data.pop(0)
                print(f"Removed: {removed}")
            else:
                raise IndexError("Queue is empty. Cannot remove.")
        except IndexError as e:
            print(f"Error: {e}")

    def print_all(self):
        try:
            if not self.is_empty():
                print("Queue:", self.data)
            else:
                raise IndexError("Queue is empty. Nothing to print.")
        except IndexError as e:
            print(f"Error: {e}")
